"""
Perform tests on the UI scripts module to ensure that the data
can be serialised and deserialised correctly.
"""
import os
import sys
import unittest

# Our modules are in the parent directory
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))) # pylint: disable=wrong-import-position

from sims2patcher import dbpf, uiscript
from sims2patcher.uiscript import UIScriptElement, UIScriptRoot


class UIScriptTest(unittest.TestCase):
    """
    Test our "UI scripts" module against test files.
    """
    tmp_files = []

    @classmethod
    def setUpClass(cls):
        os.chdir(os.path.join(os.path.dirname(__file__), ".."))
        cls.ui_package = dbpf.DBPF("tests/files/ui.package")
        return super().setUpClass()

    def test_serialize_from_text(self):
        """Check we can serialize a conceptual .uiScript file"""
        raw = """# This is a comment
        <LEGACY clsid=GZWinGen iid=IGZWinGen area=(10,10,605,432) >
        <CHILDREN>
            <LEGACY clsid=GZWinBMP iid=IGZWinBMP transparentbkg=yes >
            <LEGACY clsid=GZWinText caption="Hello, World!" >
        </CHILDREN>
        """
        root: UIScriptRoot = uiscript.serialize_uiscript(raw)
        self.assertEqual(len(root.children), 1)
        self.assertIsInstance(root, UIScriptRoot)
        self.assertIsInstance(root.children[0], UIScriptElement)
        self.assertEqual(len(root.children[0].children), 2)
        self.assertEqual(root.children[0]["clsid"], "GZWinGen")
        self.assertEqual(root.children[0]["iid"], "IGZWinGen")
        self.assertEqual(root.children[0]["area"], "(10,10,605,432)")
        self.assertEqual(root.children[0].children[0]["clsid"], "GZWinBMP")
        self.assertEqual(root.children[0].children[0]["iid"], "IGZWinBMP")
        self.assertEqual(root.children[0].children[0]["transparentbkg"], "yes")
        self.assertEqual(root.children[0].children[1]["clsid"], "GZWinText")
        self.assertEqual(root.children[0].children[1]["caption"], "Hello, World!")
        self.assertEqual(root.comments[0], "# This is a comment")
        self.assertEqual(root.children[0].attributes, {
            "clsid": "GZWinGen",
            "iid": "IGZWinGen",
            "area": "(10,10,605,432)"
        })

    def test_serialize_from_package(self):
        """Check serialization is accurate for a .uiScript file with 1 child"""
        entry = self.ui_package.get_entry(dbpf.TYPE_UI_DATA, 0xa99d8a11, 0x8c159250)
        root = uiscript.serialize_uiscript(entry.data.decode("utf-8"))

        self.assertEqual(root.comments, ["# Generated by UI editor"])
        self.assertEqual(len(root.children), 1)
        self.assertEqual(len(root.children[0].children), 12)
        self.assertEqual(len(root.children[0].children[11].children), 4)

        last_element = root.children[0].children[11].children[3]
        self.assertEqual(last_element["clsid"], "GZWinText")
        self.assertEqual(last_element["textoffsets"], "(0,0)")

        last_child_first_element = root.children[0].children[11].children[0]
        self.assertEqual(last_child_first_element["font"], "0x00001318")
        self.assertEqual(last_child_first_element["caption"], "kFOV=10.0f")

        first_child_first_element = root.children[0].children[0]
        self.assertEqual(first_child_first_element["image"], "{499db772,a9b30210}")
